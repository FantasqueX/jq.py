name: Build

on: [push, pull_request]

jobs:
  tests:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9, "3.10", "3.11-dev", "pypy-3.7"]

    steps:

    - uses: actions/checkout@v2

    - name: Use Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - run: pip install tox virtualenv

    - run: "make jq.c"

    - run: tox -e py

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v4
        name: Use Python 3.7
        with:
          python-version: '3.7'

      - run: make jq.c

      - run: pip install build twine

      - name: Build sdist
        run: python -m build --sdist

      - name: Check metadata
        run: python -m twine check dist/*

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build_wheels_matrix:
    name: Generate matrix for building wheels
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:

      - uses: actions/checkout@v2

      - name: Use Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.10.1

      - id: set-matrix
        env:
          CIBW_ARCHS_LINUX: "auto64 aarch64"
          CIBW_ARCHS_MACOS: "auto64"
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
                | sed 's/.*/{"cibw-only": "&", "os": "ubuntu-20.04"}/' \
              && cibuildwheel --print-build-identifiers --platform macos \
                | sed 's/.*/{"cibw-only": "&", "os": "macos-10.15" }/'
            } | jq --slurp --compact-output '{"include": .}'
          )
          echo ::set-output name=matrix::"$MATRIX"

  build_wheels:
    name: Build ${{ matrix.cibw-only }} wheel

    needs: build_wheels_matrix

    strategy:
      matrix: ${{ fromJson(needs.build_wheels_matrix.outputs.matrix) }}

    runs-on: ${{ matrix.os }}

    env:
      CIBW_BEFORE_BUILD: "pip install cython==0.29.32 && cython {project}/jq.pyx"
      CIBW_TEST_REQUIRES: "-r test-requirements.txt"
      CIBW_TEST_COMMAND: "py.test {project}/tests"

    steps:

    - uses: actions/checkout@v2

    - name: Use Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Build wheels
      if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/') }}
      uses: pypa/cibuildwheel@v2.10.1
      with:
        only: ${{ matrix.cibw-only }}

    - name: Print build identifiers
      if: ${{ !(github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) }}
      run: |
        python -m pip install cibuildwheel==2.10.1
        python -m cibuildwheel --only ${{ matrix.cibw-only }} --print-build-identifiers

    - uses: actions/upload-artifact@v2
      if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/') }}
      with:
        path: ./wheelhouse/*.whl
